#!/usr/bin/env bash

set -e

case "$DB" in
postgres|postgresql)
  RAILSDB="postgresql"
  HOST=${DB_POSTGRES_HOST:-${DB_HOST}}
  USERNAME=$DB_USERNAME
  PASSWORD=$DB_PASSWORD
  ;;
mysql)
  RAILSDB="mysql"
  HOST=${DB_MYSQL_HOST:-${DB_HOST}}
  USERNAME=$DB_USERNAME
  PASSWORD=$DB_PASSWORD
  ;;
sqlite|'')
  RAILSDB="sqlite3"
  ;;
*)
  echo "Invalid DB specified: $DB"
  exit 1
  ;;
esac

if [ ! -z $SOLIDUS_BRANCH ]
then
  BRANCH=$SOLIDUS_BRANCH
else
  BRANCH="master"
fi

extension_name="solidus_starter_frontend"

if [[ -z $GENERATE_FRONTEND ]]; then
  sandbox_name='sandbox'
  extension_gem_line="gem '$extension_name', path: '..'"
else
  sandbox_name='sandbox-generated'
  extension_gem_line=""
fi

sandbox_path="./${sandbox_name}"

# Stay away from the bundler env of the containing extension.
function unbundled {
  ruby -rbundler -e'b = proc {system *ARGV}; Bundler.respond_to?(:with_unbundled_env) ? Bundler.with_unbundled_env(&b) : Bundler.with_clean_env(&b)' -- $@
}

rm -rf ${sandbox_path}
unbundled bundle exec rails new ${sandbox_name} --database="$RAILSDB" \
  --skip-bundle \
  --skip-git \
  --skip-keeps \
  --skip-rc \
  --skip-spring \
  --skip-test \
  --skip-javascript

if [ ! -d "${sandbox_name}" ]; then
  echo 'sandbox rails application failed'
  exit 1
fi

cd ${sandbox_path}
cat <<RUBY >> Gemfile
# By default, the solidus gem also includes the standard frontend via
# the solidus_frontend gem. To make this extension work, you need to
# exclude it and manually include all the other Solidus components.

solidus_repo = ENV.fetch('SOLIDUS_REPO', 'solidusio/solidus')
solidus_branch = ENV.fetch('SOLIDUS_BRANCH', 'master')
solidus_i18n_repo = ENV.fetch('SOLIDUS_I18N_REPO', 'solidusio/solidus_i18n')
solidus_i18n_branch = ENV.fetch('SOLIDUS_I18N_BRANCH', 'master')

gem 'solidus_core', github: solidus_repo, branch: solidus_branch
gem 'solidus_api', github: solidus_repo, branch: solidus_branch
gem 'solidus_backend', github: solidus_repo, branch: solidus_branch
gem 'solidus_sample', github: solidus_repo, branch: solidus_branch
gem 'solidus_i18n', github: solidus_i18n_repo, branch: solidus_i18n_branch

gem 'rails-i18n'
${extension_gem_line}
gem 'solidus_auth_devise'
RUBY

replace_in_database_yml() {
  if [ $RAILSDB = "postgresql" ]; then
    sed -i.bck "/^  adapter:/a \ \ $1:  $2" config/database.yml
  elif [ $RAILSDB = "mysql" ]; then
    sed -i.bck "s/^  $1:.*/\ \ $1: $2/" config/database.yml
  fi
  if [ -f config/database.yml.bck ]; then
    rm -f config/database.yml.bck
  fi
}

if [ ${HOST} ]; then
  replace_in_database_yml "host" $HOST
fi
if [ ${USERNAME} ]; then
  replace_in_database_yml "username" $USERNAME
fi
if [ ${PASSWORD} ]; then
  replace_in_database_yml "password" $PASSWORD
fi

unbundled bundle install --gemfile Gemfile

unbundled bundle exec rake db:drop db:create

unbundled bundle exec rails generate solidus:install \
  --auto-accept \
  --user_class=Spree::User \
  --enforce_available_locales=true \
  --with-authentication=false \
  --payment-method=none \
  $@

unbundled bundle exec rails generate solidus:auth:install --auto-run-migrations

if [[ -z $GENERATE_FRONTEND ]]; then
  unbundled bundle exec rails g solidus_starter_frontend:install
  unbundled bundle exec rails g solidus_starter_frontend:rspec
  unbundled bundle exec rails g rspec:install
else
  ruby -I ../lib ../exe/${extension_name} --auto-accept
fi

echo
echo "ðŸš€ Sandbox app successfully created for $extension_name!"
echo "ðŸš€ Using $RAILSDB and Solidus $BRANCH"
echo "ðŸš€ Use 'export DB=[postgres|mysql|sqlite]' to control the DB adapter"
echo "ðŸš€ Use 'export SOLIDUS_BRANCH=<BRANCH-NAME>' to control the Solidus version"
echo "ðŸš€ This app is intended for test purposes."
